-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop(op) {
  [s (op), fun (l, op, r) {Binop (op, l, r)}]
}

-- Primary expression
<<<<<<< HEAD
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    exp = memo $ eta (failure ("expression parsing not implemented\n"));
=======
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr ({[Left, {binop ("!!")}],
                               [Left, {binop ("&&")}],
                               [Nona, map (binop, {"<", ">", "<=", ">=", "==", "!="})],
                               [Left, map (binop, {"+", "-"})],
                               [Left, map (binop, {"*", "/", "%"})]}, primary));
>>>>>>> A03-straight-line-parser

var statement = memo $ eta syntax (
  variable=lident s[":="] expression=exp           {Assn (variable, expression)} |
  kSkip                                            {Skip}                        |
  kRead variable=inbr[s ("("), lident, s (")")]    {Read (variable)}             |
  kWrite expression=inbr[s ("("), exp, s (")")]    {Write (expression)}
);
var statements = memo $ eta syntax (statement | first=statement s[";"] second=statements {Seq (first, second)});

-- Public top-level parser
<<<<<<< HEAD
public parse = stmt;
=======
public parse = statements;
>>>>>>> A03-straight-line-parser
